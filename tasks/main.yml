---
- name: Ensure vnc group exists
  ansible.builtin.group:
    name: "{{ tigervnc_group }}"
    state: present

- name: Ensure vnc user exists
  ansible.builtin.user:
    append: "{{ true if tigervnc_extra_groups | length > 0 else false }}"
    group: "{{ tigervnc_user }}"
    groups: "{{ tigervnc_extra_groups }}"
    home: "{{ tigervnc_home_dir }}"
    name: "{{ tigervnc_group }}"
    shell: /bin/bash
    state: present
  when: tigervnc_group != 'root'

- name: Ensure packages are installed
  ansible.builtin.apt:
    install_recommends: false
    name: "{{ tigervnc_dependencies + tigervnc_packages }}"
    state: present
    update_cache: true

- name: Ensure .vnc directory exists in vnc user home directory
  ansible.builtin.file:
    group: "{{ tigervnc_group }}"
    mode: 0750
    owner: "{{ tigervnc_user }}"
    path: "{{ tigervnc_home_dir }}/.vnc"
    state: directory

- name: Install vnc password file
  ansible.builtin.shell: vncpasswd -f > {{ tigervnc_password_file }}
  args:
    creates: "{{ tigervnc_password_file }}"
    stdin: "{{ tigervnc_password }}"

- name: Ensure file permissions are correct
  ansible.builtin.file:
    group: "{{ tigervnc_group }}"
    mode: 0600
    name: "{{ tigervnc_password_file }}"
    owner: "{{ tigervnc_user }}"

- name: Ensure systemd service file is installed
  ansible.builtin.template:
    dest: /etc/systemd/system/vncserver@.service
    group: root
    mode: 0750
    owner: root
    src: vncserver@.service.j2
  register: _systemd

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  when: _systemd is changed

- name: Ensure each TigerVNC service is in the desired state
  ansible.builtin.service:
    enabled: "{{ item.enabled | d(true) }}"
    name: "{{ item.name }}"
    state: "{{ item.state | d('started') }}"
  loop: "{{ tigervnc_services }}"
  loop_control:
    label: "{{ item.name }}"
